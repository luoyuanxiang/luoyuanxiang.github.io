window.__VP_HASH_MAP__=JSON.parse("{\"01.后端_01.java_01.环境变量-helloworld.md\":\"D6jl_5Qd\",\"01.后端_01.java_02.变量_数据类型转换_运算符.md\":\"Bxckm5K_\",\"01.后端_01.java_03.运算符.md\":\"3tZKCg7s\",\"01.后端_01.java_04.流程控制.md\":\"Zni1Fu69\",\"01.后端_01.java_05.数组.md\":\"DxxOT1wQ\",\"01.后端_01.java_06.方法.md\":\"CYdVSSmv\",\"01.后端_01.java_07.面向对象（一）.md\":\"DaSkGAyV\",\"01.后端_01.java_08.面向对象（二）.md\":\"BYIiXL2L\",\"01.后端_01.java_09.面向对象（三）.md\":\"CasbW8Ia\",\"01.后端_01.java_10.面向对象（四）.md\":\"BgaIKpFd\",\"01.后端_01.java_11.面向对象（五）.md\":\"BWZiuY39\",\"01.后端_01.java_12.面向对象（六）.md\":\"DKsOvNjl\",\"01.后端_01.java_13.异常_object.md\":\"CFJbk2bs\",\"01.后端_01.java_14.基础api.md\":\"Ck8F3o9c\",\"01.后端_01.java_15.常用api.md\":\"C3uf1Tst\",\"01.后端_01.java_16.多线程（一）.md\":\"BWHEXHao\",\"01.后端_01.java_17.多线程（二）.md\":\"0s1VfkMG\",\"01.后端_01.java_18.集合（一）.md\":\"BZc5vwra\",\"01.后端_01.java_19.集合（二）.md\":\"R5ZvPves\",\"01.后端_01.java_20.map集合.md\":\"Bq-HIlUw\",\"01.后端_01.java_21.io流（一）.md\":\"CZobkLQ9\",\"01.后端_01.java_22.io流（二）.md\":\"C9OdZHnp\",\"01.后端_01.java_23.网络编程_正则表达式_设计模式.md\":\"BcOlU_tw\",\"01.后端_01.java_24.jdk新特性.md\":\"CS5VsJkv\",\"01.后端_01.java_25.反射_注解.md\":\"DeCPpZsQ\",\"01.后端_02.spring_01.spring多线程实现_合理设置最大线程数和核心线程数.md\":\"sUNby9Wm\",\"01.后端_02.spring_02.spring-token无状态权限验证.md\":\"DFZBpGEP\",\"01.后端_02.spring_spring框架：ioc和aop的理解.md\":\"BKH78nBE\",\"01.后端_03.sql_01.sql优化.md\":\"499aWMbP\",\"01.后端_目录.md\":\"C79EENPs\",\"02.前端_目录.md\":\"BwcCuCsu\",\"03.运维_01.docker_01.docker命令学习.md\":\"DA_aCMQp\",\"03.运维_01.docker_02.docker-compose命令学习.md\":\"BL83b3sd\",\"03.运维_02.linux_01.linux安装tesseract.md\":\"BeCbyyir\",\"03.运维_02.linux_02.linux中jar启动脚本.md\":\"B5BEZodP\",\"03.运维_02.linux_03.阿里云服务器（anolisos-8.8-x86_64）内网升级openssh记录.md\":\"CthNEEVm\",\"03.运维_目录.md\":\"BK4bMIt_\",\"20.文档_100.关于我.md\":\"C7ZOA1sW\",\"20.文档_110.网站导航.md\":\"DEcQBYRN\",\"20.文档_115.留言区.md\":\"DGVkJxRx\",\"@fragment_01.java代码性能优化总结.md\":\"uMYe_hVt\",\"@pages_archivespage.md\":\"4zJ79-1U\",\"@pages_articleoverviewpage.md\":\"oF4bSsRM\",\"@pages_categoriespage.md\":\"q9Nrh8V3\",\"@pages_loginpage.md\":\"Dm5tW8AS\",\"@pages_risklinkpage.md\":\"Bp-KwT5J\",\"@pages_tagspage.md\":\"vyFGoBuK\",\"index.md\":\"D2RjfWo5\"}");function deserializeFunctions(r){return Array.isArray(r)?r.map(deserializeFunctions):typeof r=="object"&&r!==null?Object.keys(r).reduce((t,n)=>(t[n]=deserializeFunctions(r[n]),t),{}):typeof r=="string"&&r.startsWith("_vp-fn_")?new Function(`return ${r.slice(7)}`)():r};window.__VP_SITE_DATA__=deserializeFunctions(JSON.parse("{\"lang\":\"zh-CN\",\"dir\":\"ltr\",\"title\":\"老罗の小站\",\"description\":\"欢迎来到 vitepress-theme-teek 使用文档,Teek 是一个基于 VitePress 构建的主题，是在默认主题的基础上进行拓展，支持 VitePress 的所有功能、配置,Teek 拥有三种典型的知识管理形态：结构化、碎片化、体系化，可以轻松构建一个结构化知识库，适用个人博客、文档站、知识库等场景\",\"base\":\"/\",\"head\":[],\"router\":{\"prefetchLinks\":true},\"appearance\":true,\"themeConfig\":{\"blogger\":{\"avatar\":\"https://cdn.luoyuanxiang.top/avatar.png\",\"shape\":\"circle-rotate\",\"name\":\"🎉老罗の小站\",\"slogan\":\"收录技术、生活与思考的零散片段\",\"circleBgImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\",\"circleBgMask\":false,\"color\":\"#fff\"},\"category\":{\"enabled\":true,\"limit\":8,\"autoPage\":false,\"pageSpeed\":4000},\"tag\":{\"enabled\":true,\"limit\":21,\"autoPage\":false,\"pageSpeed\":4000},\"topArticle\":{\"enabled\":true,\"limit\":5,\"autoPage\":false,\"pageSpeed\":4000,\"dateFormat\":\"yyyy-MM-dd\"},\"page\":{\"pageSize\":18},\"themeSize\":\"large\",\"docAnalysis\":{\"createTime\":\"2024-10-09\",\"statistics\":{\"provider\":\"busuanzi\"},\"wordCount\":true,\"readingTime\":true,\"appendInfo\":[{\"key\":\"index\",\"label\":\"序号\",\"value\":\"One\"}]},\"riskLink\":{\"enabled\":true,\"whitelist\":[],\"blacklist\":[]},\"articleBottomTip\":\"_vp-fn_() => {\\n    return {\\n      type: \\\"tip\\\",\\n      title: \\\"\\\\u58F0\\\\u660E\\\",\\n      text: `<p>\\\\u4F5C\\\\u8005\\\\uFF1A\\\\u8001\\\\u7F57\\\\u306E\\\\u5C0F\\\\u7AD9</p>\\n             <p>\\\\u7248\\\\u6743\\\\uFF1A\\\\u6B64\\\\u6587\\\\u7AE0\\\\u7248\\\\u6743\\\\u5F52 \\\\u8001\\\\u7F57\\\\u306E\\\\u5C0F\\\\u7AD9 \\\\u6240\\\\u6709\\\\uFF0C\\\\u5982\\\\u6709\\\\u8F6C\\\\u8F7D\\\\uFF0C\\\\u8BF7\\\\u6CE8\\\\u660E\\\\u51FA\\\\u5904!</p>\\n             <p style=\\\"margin-bottom: 0\\\">\\\\u94FE\\\\u63A5\\\\uFF1A\\\\u53EF\\\\u70B9\\\\u51FB\\\\u53F3\\\\u4E0A\\\\u89D2\\\\u5206\\\\u4EAB\\\\u6B64\\\\u9875\\\\u9762\\\\u590D\\\\u5236\\\\u6587\\\\u7AE0\\\\u94FE\\\\u63A5</p>\\n            `\\n    };\\n  }\",\"backTopDone\":\"_vp-fn_(TkMessage) => TkMessage.success({\\n    message: \\\"\\\\u5DF2\\\\u8FBE\\\\u5230\\\\u9876\\\\u90E8\\\\u{1F389}\\\",\\n    duration: 3e3\\n  })\",\"toCommentDone\":\"_vp-fn_(TkMessage) => TkMessage.success({\\n    message: \\\"\\\\u5DF2\\\\u8FBE\\\\u5230\\\\u8BC4\\\\u8BBA\\\\u533A\\\\u2728\\\",\\n    duration: 3e3\\n  })\",\"codeBlock\":{\"disabled\":false,\"collapseHeight\":400,\"copiedDone\":\"_vp-fn_(TkMessage) => TkMessage.success(\\\"\\\\u4EE3\\\\u7801\\\\u5DF2\\\\u590D\\\\u5236 \\\\u{1F389}\\\")\"},\"post\":{\"showCapture\":true},\"articleShare\":{\"enabled\":true},\"articleAnalyze\":{\"imageViewer\":{\"hideOnClickModal\":true},\"showIcon\":true,\"dateFormat\":\"yyyy-MM-dd\",\"showInfo\":true,\"showAuthor\":true,\"showCreateDate\":true,\"showUpdateDate\":true,\"showCategory\":true,\"showTag\":true,\"teleport\":{\"selector\":\"h1\",\"position\":\"after\",\"className\":\"h1-bottom-info\"}},\"comment\":{\"provider\":\"twikoo\",\"options\":{\"envId\":\"https://twikoo.luoyuanxiang.top/\",\"version\":\"1.6.44\",\"jsLink\":\"https://cdnjs.cloudflare.com/ajax/libs/twikoo/1.6.44/twikoo.min.js\",\"repo\":\"luoyuanxiang/luoyuanxiang.github.io\",\"repoId\":\"R_kgDOKHKNnA\",\"category\":\"Announcements\",\"categoryId\":\"DIC_kwDOKHKNnM4Cs359\"}},\"notice\":{\"enabled\":false,\"title\":\"公告\",\"initOpen\":true,\"duration\":3000,\"mobileMinify\":false,\"reopen\":true,\"useStorage\":true,\"twinkle\":false,\"position\":\"center\"},\"appreciation\":{\"position\":\"doc-after-popper\",\"options\":{\"trigger\":\"hover\",\"title\":\"打赏支持\",\"icon\":\"weChatPay\",\"content\":\"<img alt=\\\"付款码\\\" src='https://cdn.luoyuanxiang.top/PayQrcode.png'>\",\"expand\":false}},\"logo\":\"\",\"darkModeSwitchLabel\":\"主题\",\"sidebarMenuLabel\":\"菜单\",\"returnToTopLabel\":\"返回顶部\",\"lastUpdatedText\":\"上次更新时间\",\"outline\":{\"level\":[2,4],\"label\":\"本页导航\"},\"docFooter\":{\"prev\":\"上一页\",\"next\":\"下一页\"},\"nav\":[{\"text\":\"🏡首页\",\"link\":\"/\"},{\"text\":\"🗃️笔记\",\"items\":[{\"text\":\"\\n                <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n                  <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/编程.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n                  <span>后端</span>\\n                </div>\\n                \",\"link\":\"/service\",\"activeMatch\":\"01.后端/目录\"},{\"text\":\"\\n                <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n                  <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/运维.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n                  <span>运维</span>\\n                </div>\\n                \",\"link\":\"/operations\",\"activeMatch\":\"03.运维/目录\"},{\"text\":\"\\n                <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n                  <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/前端.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n                  <span>前端</span>\\n                </div>\\n                \",\"link\":\"/web\",\"activeMatch\":\"02.前端/目录\"}],\"activeMatch\":\"02.前端\"},{\"text\":\"📝随笔\",\"items\":[{\"text\":\"<div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n              <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/Java-Light.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n              <span>Java代码性能优化总结</span>\\n            </div>\",\"link\":\"/Java/optimize\",\"activeMatch\":\"@fragment/01.Java代码性能优化总结\"}],\"activeMatch\":\"@fragment\"},{\"text\":\"👏索引\",\"items\":[{\"text\":\"📃分类页\",\"link\":\"/categories\",\"activeMatch\":\"@pages/categoriesPage\"},{\"text\":\"🔖标签页\",\"link\":\"/tags\",\"activeMatch\":\"@pages/tagsPage\"},{\"text\":\"\\n            <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n              <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/归档.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n              <span>归档页</span>\\n            </div>\\n            \",\"link\":\"/archives\",\"activeMatch\":\"@pages/archivesPage\"},{\"text\":\"\\n            <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n              <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/风险提示.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n              <span>风险链接提示页</span>\\n            </div>\\n            \",\"link\":\"/risk-link?target=https://onedayxyy.cn/\"}],\"activeMatch\":\"@pages\"},{\"text\":\"🍷关于\",\"items\":[{\"text\":\"👋关于我\",\"link\":\"/about-me\",\"activeMatch\":\"20.文档/100.关于我\"},{\"text\":\"🌐网站导航\",\"link\":\"/websites\",\"activeMatch\":\"20.文档/110.网站导航\"},{\"text\":\"\\n            <div style=\\\"display: flex; align-items: center; gap: 4px;\\\">\\n              <img src=\\\"https://cdn.luoyuanxiang.top/img/nav/网站统计.svg\\\" alt=\\\"\\\" style=\\\"width: 16px; height: 16px;\\\">\\n              <span>网站统计</span>\\n            </div>\\n            \",\"link\":\"https://umami.luoyuanxiang.top/share/VCFFhbiG0aJn0dTf/luoyuanxiang.top\"}],\"activeMatch\":\"20.文档\"}],\"socialLinks\":[{\"icon\":{\"svg\":\"<svg t=\\\"1743875298298\\\" class=\\\"icon\\\" viewBox=\\\"0 0 1024 1024\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" p-id=\\\"2388\\\" width=\\\"200\\\" height=\\\"200\\\"><path d=\\\"M512 1024C229.2224 1024 0 794.7776 0 512S229.2224 0 512 0s512 229.2224 512 512-229.2224 512-512 512z m259.1488-568.8832H480.4096a25.2928 25.2928 0 0 0-25.2928 25.2928l-0.0256 63.2064c0 13.952 11.3152 25.2928 25.2672 25.2928h177.024c13.9776 0 25.2928 11.3152 25.2928 25.2672v12.6464a75.8528 75.8528 0 0 1-75.8528 75.8528H366.592a25.2928 25.2928 0 0 1-25.2672-25.2928v-240.1792a75.8528 75.8528 0 0 1 75.8272-75.8528h353.9456a25.2928 25.2928 0 0 0 25.2672-25.2928l0.0768-63.2064a25.2928 25.2928 0 0 0-25.2672-25.2928H417.152a189.6192 189.6192 0 0 0-189.6192 189.6448v353.9456c0 13.9776 11.3152 25.2928 25.2928 25.2928h372.9408a170.6496 170.6496 0 0 0 170.6496-170.6496v-145.408a25.2928 25.2928 0 0 0-25.2928-25.2672z\\\" fill=\\\"#C71D23\\\" p-id=\\\"2389\\\"></path></svg>\"},\"link\":\"https://gitee.com/luoyuanxiang\"},{\"icon\":{\"svg\":\"<svg t=\\\"1743875620187\\\" class=\\\"icon\\\" viewBox=\\\"0 0 1024 1024\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" p-id=\\\"16697\\\" width=\\\"200\\\" height=\\\"200\\\"><path d=\\\"M512 0A512 512 0 1 1 0 512 512 512 0 0 1 512 0z\\\" fill=\\\"#ff485f\\\" p-id=\\\"16698\\\" data-spm-anchor-id=\\\"a313x.search_index.0.i13.70183a81yTylfI\\\" class=\\\"selected\\\"></path><path d=\\\"M726.980923 295.384615H280.123077A63.606154 63.606154 0 0 0 216.615385 358.892308v295.187692a63.606154 63.606154 0 0 0 63.507692 63.507692h446.857846a63.606154 63.606154 0 0 0 63.507692-63.507692v-295.187692A63.606154 63.606154 0 0 0 726.980923 295.384615z m25.403077 358.715077a25.481846 25.481846 0 0 1-25.403077 25.403077H280.123077a25.481846 25.481846 0 0 1-25.403077-25.403077v-295.187692a25.481846 25.481846 0 0 1 25.403077-25.403077h446.857846a25.481846 25.481846 0 0 1 25.403077 25.403077z\\\" fill=\\\"#FFFFFF\\\" p-id=\\\"16699\\\"></path><path d=\\\"M693.720615 396.307692l-190.148923 119.965539-190.148923-119.965539a19.062154 19.062154 0 0 0-20.322461 32.236308l200.073846 126.247385a19.062154 19.062154 0 0 0 10.161231 2.934153h0.630153a19.062154 19.062154 0 0 0 10.161231-2.934153l200.073846-126.247385a19.101538 19.101538 0 1 0-20.48-32.236308z\\\" fill=\\\"#FFFFFF\\\" p-id=\\\"16700\\\"></path></svg>\"},\"link\":\"mailto:1141306760@qq.com\"},{\"icon\":\"github\",\"link\":\"https://github.com/luoyuanxiang\"}],\"search\":{\"provider\":\"local\"},\"editLink\":{\"text\":\"在 GitHub 上编辑此页\",\"pattern\":\"https://github.com/luoyuanxiang/vitepress-theme-teek/edit/main/docs/:path\"},\"sidebar\":{\"/\":[],\"/01.后端/\":[{\"collapsed\":true,\"items\":[{\"text\":\"java\",\"collapsed\":true,\"items\":[{\"text\":\"环境变量-HelloWorld\",\"collapsed\":true,\"link\":\"/01.后端/01.java/01.环境变量-HelloWorld\"},{\"text\":\"变量_数据类型转换_运算符\",\"collapsed\":true,\"link\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\"},{\"text\":\"运算符\",\"collapsed\":true,\"link\":\"/01.后端/01.java/03.运算符\"},{\"text\":\"流程控制\",\"collapsed\":true,\"link\":\"/01.后端/01.java/04.流程控制\"},{\"text\":\"数组\",\"collapsed\":true,\"link\":\"/01.后端/01.java/05.数组\"},{\"text\":\"方法\",\"collapsed\":true,\"link\":\"/01.后端/01.java/06.方法\"},{\"text\":\"面向对象（一）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/07.面向对象（一）\"},{\"text\":\"面向对象（二）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/08.面向对象（二）\"},{\"text\":\"面向对象（三）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/09.面向对象（三）\"},{\"text\":\"面向对象（四）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/10.面向对象（四）\"},{\"text\":\"面向对象（五）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/11.面向对象（五）\"},{\"text\":\"面向对象（六）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/12.面向对象（六）\"},{\"text\":\"异常_Object\",\"collapsed\":true,\"link\":\"/01.后端/01.java/13.异常_Object\"},{\"text\":\"基础API\",\"collapsed\":true,\"link\":\"/01.后端/01.java/14.基础API\"},{\"text\":\"常用API\",\"collapsed\":true,\"link\":\"/01.后端/01.java/15.常用API\"},{\"text\":\"多线程（一）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/16.多线程（一）\"},{\"text\":\"多线程（二）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/17.多线程（二）\"},{\"text\":\"集合（一）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/18.集合（一）\"},{\"text\":\"集合（二）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/19.集合（二）\"},{\"text\":\"Map集合\",\"collapsed\":true,\"link\":\"/01.后端/01.java/20.Map集合\"},{\"text\":\"IO流（一）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/21.IO流（一）\"},{\"text\":\"IO流（二）\",\"collapsed\":true,\"link\":\"/01.后端/01.java/22.IO流（二）\"},{\"text\":\"网络编程_正则表达式_设计模式\",\"collapsed\":true,\"link\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\"},{\"text\":\"jdk新特性\",\"collapsed\":true,\"link\":\"/01.后端/01.java/24.jdk新特性\"},{\"text\":\"反射_注解\",\"collapsed\":true,\"link\":\"/01.后端/01.java/25.反射_注解\"}]},{\"text\":\"spring\",\"collapsed\":true,\"items\":[{\"text\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"collapsed\":true,\"link\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\"},{\"text\":\"spring-token无状态权限验证\",\"collapsed\":true,\"link\":\"/01.后端/02.spring/02.spring-token无状态权限验证\"},{\"text\":\"Spring框架：IOC和AOP的理解\",\"collapsed\":true,\"link\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\"}]},{\"text\":\"SQL\",\"collapsed\":true,\"items\":[{\"text\":\"SQL优化\",\"collapsed\":true,\"link\":\"/01.后端/03.SQL/01.SQL优化\"}]}]}],\"/03.运维/\":[{\"collapsed\":true,\"items\":[{\"text\":\"docker\",\"collapsed\":true,\"items\":[{\"text\":\"docker命令学习\",\"collapsed\":true,\"link\":\"/03.运维/01.docker/01.docker命令学习\"},{\"text\":\"docker-compose命令学习\",\"collapsed\":true,\"link\":\"/03.运维/01.docker/02.docker-compose命令学习\"}]},{\"text\":\"linux\",\"collapsed\":true,\"items\":[{\"text\":\"Linux安装Tesseract\",\"collapsed\":true,\"link\":\"/03.运维/02.linux/01.Linux安装Tesseract\"},{\"text\":\"Linux中jar启动脚本\",\"collapsed\":true,\"link\":\"/03.运维/02.linux/02.Linux中jar启动脚本\"},{\"text\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"collapsed\":true,\"link\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\"}]}]}]},\"permalinks\":{\"map\":{\"01.后端/01.java/01.环境变量-HelloWorld\":\"/Java/097883\",\"01.后端/01.java/02.变量_数据类型转换_运算符\":\"/Java/e0305c\",\"01.后端/01.java/03.运算符\":\"/Java/57aa12\",\"01.后端/01.java/04.流程控制\":\"/Java/cedb8e\",\"01.后端/01.java/05.数组\":\"/Java/716d45\",\"01.后端/01.java/06.方法\":\"/Java/85f076\",\"01.后端/01.java/07.面向对象（一）\":\"/Java/4e3824\",\"01.后端/01.java/08.面向对象（二）\":\"/Java/d4be95\",\"01.后端/01.java/09.面向对象（三）\":\"/Java/c63177\",\"01.后端/01.java/10.面向对象（四）\":\"/Java/c0363b\",\"01.后端/01.java/11.面向对象（五）\":\"/Java/c12280\",\"01.后端/01.java/12.面向对象（六）\":\"/Java/2f3df1\",\"01.后端/01.java/13.异常_Object\":\"/Java/b73647\",\"01.后端/01.java/14.基础API\":\"/Java/bc3bbd\",\"01.后端/01.java/15.常用API\":\"/Java/3e5b8d\",\"01.后端/01.java/16.多线程（一）\":\"/Java/50ef81\",\"01.后端/01.java/17.多线程（二）\":\"/Java/36d001\",\"01.后端/01.java/18.集合（一）\":\"/Java/90c991\",\"01.后端/01.java/19.集合（二）\":\"/Java/20004d\",\"01.后端/01.java/20.Map集合\":\"/Java/5a9965\",\"01.后端/01.java/21.IO流（一）\":\"/Java/be8a93\",\"01.后端/01.java/22.IO流（二）\":\"/Java/c1b253\",\"01.后端/01.java/23.网络编程_正则表达式_设计模式\":\"/Java/74ed07\",\"01.后端/01.java/24.jdk新特性\":\"/Java/e2e3a9\",\"01.后端/01.java/25.反射_注解\":\"/Java/ff0a44\",\"01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\":\"/service/5b4277\",\"01.后端/02.spring/02.spring-token无状态权限验证\":\"/service/db0f12\",\"01.后端/02.spring/Spring框架：IOC和AOP的理解\":\"/service/861936\",\"01.后端/03.SQL/01.SQL优化\":\"/service/18af80\",\"01.后端/目录\":\"/service\",\"02.前端/目录\":\"/web\",\"03.运维/01.docker/01.docker命令学习\":\"/operations/47692b\",\"03.运维/01.docker/02.docker-compose命令学习\":\"/operations/4a9405\",\"03.运维/02.linux/01.Linux安装Tesseract\":\"/operations/1466cc\",\"03.运维/02.linux/02.Linux中jar启动脚本\":\"/operations/933d1e\",\"03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\":\"/pages/95722d\",\"03.运维/目录\":\"/operations\",\"20.文档/100.关于我\":\"/about-me\",\"20.文档/110.网站导航\":\"/websites\",\"20.文档/115.留言区\":\"/liuyanqu\",\"@fragment/01.Java代码性能优化总结\":\"/Java/optimize\",\"@pages/archivesPage\":\"/archives\",\"@pages/articleOverviewPage\":\"/articleOverview\",\"@pages/categoriesPage\":\"/categories\",\"@pages/loginPage\":\"/login\",\"@pages/riskLinkPage\":\"/risk-link\",\"@pages/tagsPage\":\"/tags\"},\"inv\":{\"/Java/097883\":\"01.后端/01.java/01.环境变量-HelloWorld\",\"/Java/e0305c\":\"01.后端/01.java/02.变量_数据类型转换_运算符\",\"/Java/57aa12\":\"01.后端/01.java/03.运算符\",\"/Java/cedb8e\":\"01.后端/01.java/04.流程控制\",\"/Java/716d45\":\"01.后端/01.java/05.数组\",\"/Java/85f076\":\"01.后端/01.java/06.方法\",\"/Java/4e3824\":\"01.后端/01.java/07.面向对象（一）\",\"/Java/d4be95\":\"01.后端/01.java/08.面向对象（二）\",\"/Java/c63177\":\"01.后端/01.java/09.面向对象（三）\",\"/Java/c0363b\":\"01.后端/01.java/10.面向对象（四）\",\"/Java/c12280\":\"01.后端/01.java/11.面向对象（五）\",\"/Java/2f3df1\":\"01.后端/01.java/12.面向对象（六）\",\"/Java/b73647\":\"01.后端/01.java/13.异常_Object\",\"/Java/bc3bbd\":\"01.后端/01.java/14.基础API\",\"/Java/3e5b8d\":\"01.后端/01.java/15.常用API\",\"/Java/50ef81\":\"01.后端/01.java/16.多线程（一）\",\"/Java/36d001\":\"01.后端/01.java/17.多线程（二）\",\"/Java/90c991\":\"01.后端/01.java/18.集合（一）\",\"/Java/20004d\":\"01.后端/01.java/19.集合（二）\",\"/Java/5a9965\":\"01.后端/01.java/20.Map集合\",\"/Java/be8a93\":\"01.后端/01.java/21.IO流（一）\",\"/Java/c1b253\":\"01.后端/01.java/22.IO流（二）\",\"/Java/74ed07\":\"01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"/Java/e2e3a9\":\"01.后端/01.java/24.jdk新特性\",\"/Java/ff0a44\":\"01.后端/01.java/25.反射_注解\",\"/service/5b4277\":\"01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"/service/db0f12\":\"01.后端/02.spring/02.spring-token无状态权限验证\",\"/service/861936\":\"01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"/service/18af80\":\"01.后端/03.SQL/01.SQL优化\",\"/service\":\"01.后端/目录\",\"/web\":\"02.前端/目录\",\"/operations/47692b\":\"03.运维/01.docker/01.docker命令学习\",\"/operations/4a9405\":\"03.运维/01.docker/02.docker-compose命令学习\",\"/operations/1466cc\":\"03.运维/02.linux/01.Linux安装Tesseract\",\"/operations/933d1e\":\"03.运维/02.linux/02.Linux中jar启动脚本\",\"/pages/95722d\":\"03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"/operations\":\"03.运维/目录\",\"/about-me\":\"20.文档/100.关于我\",\"/websites\":\"20.文档/110.网站导航\",\"/liuyanqu\":\"20.文档/115.留言区\",\"/Java/optimize\":\"@fragment/01.Java代码性能优化总结\",\"/archives\":\"@pages/archivesPage\",\"/articleOverview\":\"@pages/articleOverviewPage\",\"/categories\":\"@pages/categoriesPage\",\"/login\":\"@pages/loginPage\",\"/risk-link\":\"@pages/riskLinkPage\",\"/tags\":\"@pages/tagsPage\"}},\"docAnalysisInfo\":{\"fileList\":[{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/01.环境变量-HelloWorld.md\",\"relativePath\":\"01.后端/01.java/01.环境变量-HelloWorld.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/02.变量_数据类型转换_运算符.md\",\"relativePath\":\"01.后端/01.java/02.变量_数据类型转换_运算符.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/03.运算符.md\",\"relativePath\":\"01.后端/01.java/03.运算符.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/04.流程控制.md\",\"relativePath\":\"01.后端/01.java/04.流程控制.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/05.数组.md\",\"relativePath\":\"01.后端/01.java/05.数组.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/06.方法.md\",\"relativePath\":\"01.后端/01.java/06.方法.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/07.面向对象（一）.md\",\"relativePath\":\"01.后端/01.java/07.面向对象（一）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/08.面向对象（二）.md\",\"relativePath\":\"01.后端/01.java/08.面向对象（二）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/09.面向对象（三）.md\",\"relativePath\":\"01.后端/01.java/09.面向对象（三）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/10.面向对象（四）.md\",\"relativePath\":\"01.后端/01.java/10.面向对象（四）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/11.面向对象（五）.md\",\"relativePath\":\"01.后端/01.java/11.面向对象（五）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/12.面向对象（六）.md\",\"relativePath\":\"01.后端/01.java/12.面向对象（六）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/13.异常_Object.md\",\"relativePath\":\"01.后端/01.java/13.异常_Object.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/14.基础API.md\",\"relativePath\":\"01.后端/01.java/14.基础API.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/15.常用API.md\",\"relativePath\":\"01.后端/01.java/15.常用API.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/16.多线程（一）.md\",\"relativePath\":\"01.后端/01.java/16.多线程（一）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/17.多线程（二）.md\",\"relativePath\":\"01.后端/01.java/17.多线程（二）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/18.集合（一）.md\",\"relativePath\":\"01.后端/01.java/18.集合（一）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/19.集合（二）.md\",\"relativePath\":\"01.后端/01.java/19.集合（二）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/20.Map集合.md\",\"relativePath\":\"01.后端/01.java/20.Map集合.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/21.IO流（一）.md\",\"relativePath\":\"01.后端/01.java/21.IO流（一）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/22.IO流（二）.md\",\"relativePath\":\"01.后端/01.java/22.IO流（二）.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/23.网络编程_正则表达式_设计模式.md\",\"relativePath\":\"01.后端/01.java/23.网络编程_正则表达式_设计模式.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/24.jdk新特性.md\",\"relativePath\":\"01.后端/01.java/24.jdk新特性.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/25.反射_注解.md\",\"relativePath\":\"01.后端/01.java/25.反射_注解.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数.md\",\"relativePath\":\"01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/02.spring-token无状态权限验证.md\",\"relativePath\":\"01.后端/02.spring/02.spring-token无状态权限验证.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/Spring框架：IOC和AOP的理解.md\",\"relativePath\":\"01.后端/02.spring/Spring框架：IOC和AOP的理解.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/03.SQL/01.SQL优化.md\",\"relativePath\":\"01.后端/03.SQL/01.SQL优化.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/目录.md\",\"relativePath\":\"01.后端/目录.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/02.前端/目录.md\",\"relativePath\":\"02.前端/目录.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/01.docker/01.docker命令学习.md\",\"relativePath\":\"03.运维/01.docker/01.docker命令学习.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/01.docker/02.docker-compose命令学习.md\",\"relativePath\":\"03.运维/01.docker/02.docker-compose命令学习.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/01.Linux安装Tesseract.md\",\"relativePath\":\"03.运维/02.linux/01.Linux安装Tesseract.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/02.Linux中jar启动脚本.md\",\"relativePath\":\"03.运维/02.linux/02.Linux中jar启动脚本.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录.md\",\"relativePath\":\"03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/目录.md\",\"relativePath\":\"03.运维/目录.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/100.关于我.md\",\"relativePath\":\"20.文档/100.关于我.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/110.网站导航.md\",\"relativePath\":\"20.文档/110.网站导航.md\"},{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/115.留言区.md\",\"relativePath\":\"20.文档/115.留言区.md\"}],\"totalFileWords\":144214,\"eachFileWords\":[{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/01.环境变量-HelloWorld.md\",\"relativePath\":\"01.后端/01.java/01.环境变量-HelloWorld.md\"},\"wordCount\":5835,\"readingTime\":\"22.3m\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":{},\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/02.变量_数据类型转换_运算符.md\",\"relativePath\":\"01.后端/01.java/02.变量_数据类型转换_运算符.md\"},\"wordCount\":4512,\"readingTime\":\"18.9m\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":{},\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/03.运算符.md\",\"relativePath\":\"01.后端/01.java/03.运算符.md\"},\"wordCount\":1954,\"readingTime\":\"8.5m\",\"frontmatter\":{\"title\":\"运算符\",\"date\":{},\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/04.流程控制.md\",\"relativePath\":\"01.后端/01.java/04.流程控制.md\"},\"wordCount\":4999,\"readingTime\":\"23m\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":{},\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/05.数组.md\",\"relativePath\":\"01.后端/01.java/05.数组.md\"},\"wordCount\":5832,\"readingTime\":\"25.3m\",\"frontmatter\":{\"title\":\"数组\",\"date\":{},\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/06.方法.md\",\"relativePath\":\"01.后端/01.java/06.方法.md\"},\"wordCount\":3750,\"readingTime\":\"15.3m\",\"frontmatter\":{\"title\":\"方法\",\"date\":{},\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/07.面向对象（一）.md\",\"relativePath\":\"01.后端/01.java/07.面向对象（一）.md\"},\"wordCount\":3189,\"readingTime\":\"12.7m\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":{},\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/08.面向对象（二）.md\",\"relativePath\":\"01.后端/01.java/08.面向对象（二）.md\"},\"wordCount\":3003,\"readingTime\":\"12.3m\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":{},\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/09.面向对象（三）.md\",\"relativePath\":\"01.后端/01.java/09.面向对象（三）.md\"},\"wordCount\":4026,\"readingTime\":\"18.1m\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":{},\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/10.面向对象（四）.md\",\"relativePath\":\"01.后端/01.java/10.面向对象（四）.md\"},\"wordCount\":4306,\"readingTime\":\"19.3m\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":{},\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/11.面向对象（五）.md\",\"relativePath\":\"01.后端/01.java/11.面向对象（五）.md\"},\"wordCount\":4064,\"readingTime\":\"17.5m\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":{},\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/12.面向对象（六）.md\",\"relativePath\":\"01.后端/01.java/12.面向对象（六）.md\"},\"wordCount\":3484,\"readingTime\":\"14.7m\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":{},\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/13.异常_Object.md\",\"relativePath\":\"01.后端/01.java/13.异常_Object.md\"},\"wordCount\":5428,\"readingTime\":\"23.9m\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":{},\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/14.基础API.md\",\"relativePath\":\"01.后端/01.java/14.基础API.md\"},\"wordCount\":4174,\"readingTime\":\"18.4m\",\"frontmatter\":{\"title\":\"基础API\",\"date\":{},\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/15.常用API.md\",\"relativePath\":\"01.后端/01.java/15.常用API.md\"},\"wordCount\":5337,\"readingTime\":\"24.7m\",\"frontmatter\":{\"title\":\"常用API\",\"date\":{},\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/16.多线程（一）.md\",\"relativePath\":\"01.后端/01.java/16.多线程（一）.md\"},\"wordCount\":4456,\"readingTime\":\"19.1m\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":{},\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/17.多线程（二）.md\",\"relativePath\":\"01.后端/01.java/17.多线程（二）.md\"},\"wordCount\":3121,\"readingTime\":\"14.1m\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":{},\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/18.集合（一）.md\",\"relativePath\":\"01.后端/01.java/18.集合（一）.md\"},\"wordCount\":5474,\"readingTime\":\"23.2m\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":{},\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/19.集合（二）.md\",\"relativePath\":\"01.后端/01.java/19.集合（二）.md\"},\"wordCount\":4944,\"readingTime\":\"22.7m\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":{},\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/20.Map集合.md\",\"relativePath\":\"01.后端/01.java/20.Map集合.md\"},\"wordCount\":6034,\"readingTime\":\"27.5m\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":{},\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/21.IO流（一）.md\",\"relativePath\":\"01.后端/01.java/21.IO流（一）.md\"},\"wordCount\":4982,\"readingTime\":\"21.3m\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":{},\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/22.IO流（二）.md\",\"relativePath\":\"01.后端/01.java/22.IO流（二）.md\"},\"wordCount\":5654,\"readingTime\":\"23.1m\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":{},\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/23.网络编程_正则表达式_设计模式.md\",\"relativePath\":\"01.后端/01.java/23.网络编程_正则表达式_设计模式.md\"},\"wordCount\":6028,\"readingTime\":\"25.3m\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":{},\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/24.jdk新特性.md\",\"relativePath\":\"01.后端/01.java/24.jdk新特性.md\"},\"wordCount\":9030,\"readingTime\":\"38.8m\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":{},\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/01.java/25.反射_注解.md\",\"relativePath\":\"01.后端/01.java/25.反射_注解.md\"},\"wordCount\":7207,\"readingTime\":\"30.5m\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":{},\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数.md\",\"relativePath\":\"01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数.md\"},\"wordCount\":684,\"readingTime\":\"2.8m\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":{},\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/02.spring-token无状态权限验证.md\",\"relativePath\":\"01.后端/02.spring/02.spring-token无状态权限验证.md\"},\"wordCount\":2861,\"readingTime\":\"15.6m\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":{},\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/02.spring/Spring框架：IOC和AOP的理解.md\",\"relativePath\":\"01.后端/02.spring/Spring框架：IOC和AOP的理解.md\"},\"wordCount\":2352,\"readingTime\":\"8.7m\",\"frontmatter\":{\"date\":{},\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/03.SQL/01.SQL优化.md\",\"relativePath\":\"01.后端/03.SQL/01.SQL优化.md\"},\"wordCount\":2154,\"readingTime\":\"8.1m\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":{},\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/01.后端/目录.md\",\"relativePath\":\"01.后端/目录.md\"},\"wordCount\":0,\"readingTime\":\"1m\",\"frontmatter\":{\"title\":\"Java基础\",\"date\":{},\"permalink\":\"/service\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"01.后端\",\"desc\":\"后端技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"后端技术\"],\"coverImg\":\"https://cdn.luoyuanxiang.tophttps://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/02.前端/目录.md\",\"relativePath\":\"02.前端/目录.md\"},\"wordCount\":0,\"readingTime\":\"1m\",\"frontmatter\":{\"title\":\"前端\",\"date\":{},\"permalink\":\"/web\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"02.前端\",\"desc\":\"前端技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"前端\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/01.docker/01.docker命令学习.md\",\"relativePath\":\"03.运维/01.docker/01.docker命令学习.md\"},\"wordCount\":2288,\"readingTime\":\"9.2m\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":{},\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/01.docker/02.docker-compose命令学习.md\",\"relativePath\":\"03.运维/01.docker/02.docker-compose命令学习.md\"},\"wordCount\":3020,\"readingTime\":\"12.4m\",\"frontmatter\":{\"date\":{},\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/01.Linux安装Tesseract.md\",\"relativePath\":\"03.运维/02.linux/01.Linux安装Tesseract.md\"},\"wordCount\":240,\"readingTime\":\"1.1m\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":{},\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/02.Linux中jar启动脚本.md\",\"relativePath\":\"03.运维/02.linux/02.Linux中jar启动脚本.md\"},\"wordCount\":510,\"readingTime\":\"2.4m\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":{},\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录.md\",\"relativePath\":\"03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录.md\"},\"wordCount\":3306,\"readingTime\":\"15.6m\",\"frontmatter\":{\"date\":{},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/03.运维/目录.md\",\"relativePath\":\"03.运维/目录.md\"},\"wordCount\":0,\"readingTime\":\"1m\",\"frontmatter\":{\"title\":\"运维\",\"date\":{},\"permalink\":\"/operations\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"03.运维\",\"desc\":\"运维技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"运维技术\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/100.关于我.md\",\"relativePath\":\"20.文档/100.关于我.md\"},\"wordCount\":12,\"readingTime\":\"1m\",\"frontmatter\":{\"title\":\"关于我\",\"date\":{},\"permalink\":\"/about-me\",\"layout\":\"page\",\"categories\":[\"更多\"],\"tags\":[\"关于我\"],\"author\":{\"name\":\"老罗の小站\",\"link\":\"https://luoyuanxiang.top/\"},\"sidebar\":false,\"article\":false,\"comment\":false,\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/10.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/110.网站导航.md\",\"relativePath\":\"20.文档/110.网站导航.md\"},\"wordCount\":5893,\"readingTime\":\"29.4m\",\"frontmatter\":{\"title\":\"网站导航\",\"date\":{},\"permalink\":\"/websites\",\"categories\":[\"关于\"],\"sidebar\":false,\"article\":false,\"comment\":false,\"themeSize\":\"wide\",\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-theme-teek/vitepress-theme-teek/docs/20.文档/115.留言区.md\",\"relativePath\":\"20.文档/115.留言区.md\"},\"wordCount\":71,\"readingTime\":\"1m\",\"frontmatter\":{\"title\":\"留言区\",\"date\":{},\"permalink\":\"/liuyanqu\",\"categories\":[null],\"tags\":[null],\"sidebar\":false,\"article\":false,\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}}],\"lastCommitTime\":\"2025-09-06 09:11:41\"},\"catalogues\":{\"arr\":[{\"filePath\":\"01.后端/目录\",\"path\":\"01.后端\",\"catalogues\":[{\"title\":\"java\",\"children\":[{\"title\":\"环境变量-HelloWorld\",\"link\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":{},\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"变量_数据类型转换_运算符\",\"link\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":{},\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"运算符\",\"link\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":{},\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"流程控制\",\"link\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":{},\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"数组\",\"link\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":{},\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"方法\",\"link\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":{},\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"面向对象（一）\",\"link\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":{},\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}},{\"title\":\"面向对象（二）\",\"link\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":{},\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"面向对象（三）\",\"link\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":{},\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（四）\",\"link\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":{},\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}},{\"title\":\"面向对象（五）\",\"link\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":{},\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（六）\",\"link\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":{},\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"}},{\"title\":\"异常_Object\",\"link\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":{},\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"基础API\",\"link\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":{},\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"常用API\",\"link\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":{},\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"多线程（一）\",\"link\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":{},\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"多线程（二）\",\"link\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":{},\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"集合（一）\",\"link\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":{},\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"集合（二）\",\"link\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":{},\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"Map集合\",\"link\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":{},\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"IO流（一）\",\"link\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":{},\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"}},{\"title\":\"IO流（二）\",\"link\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":{},\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"}},{\"title\":\"网络编程_正则表达式_设计模式\",\"link\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":{},\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"jdk新特性\",\"link\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":{},\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"反射_注解\",\"link\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":{},\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}}]},{\"title\":\"spring\",\"children\":[{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"link\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":{},\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"}},{\"title\":\"spring-token无状态权限验证\",\"link\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":{},\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"Spring框架：IOC和AOP的理解\",\"link\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":{},\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}}]},{\"title\":\"SQL\",\"children\":[{\"title\":\"SQL优化\",\"link\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":{},\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}}]}]},{\"filePath\":\"02.前端/目录\",\"path\":\"02.前端\",\"catalogues\":[]},{\"filePath\":\"03.运维/目录\",\"path\":\"03.运维\",\"catalogues\":[{\"title\":\"docker\",\"children\":[{\"title\":\"docker命令学习\",\"link\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":{},\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"docker-compose命令学习\",\"link\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":{},\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}}]},{\"title\":\"linux\",\"children\":[{\"title\":\"Linux安装Tesseract\",\"link\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":{},\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"Linux中jar启动脚本\",\"link\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":{},\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"}},{\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"link\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":{},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}}]}]}],\"map\":{\"01.后端/目录\":{\"path\":\"01.后端\",\"catalogues\":[{\"title\":\"java\",\"children\":[{\"title\":\"环境变量-HelloWorld\",\"link\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":{},\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"变量_数据类型转换_运算符\",\"link\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":{},\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"运算符\",\"link\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":{},\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"流程控制\",\"link\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":{},\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"数组\",\"link\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":{},\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"方法\",\"link\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":{},\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"面向对象（一）\",\"link\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":{},\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}},{\"title\":\"面向对象（二）\",\"link\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":{},\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"面向对象（三）\",\"link\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":{},\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（四）\",\"link\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":{},\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}},{\"title\":\"面向对象（五）\",\"link\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":{},\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（六）\",\"link\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":{},\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"}},{\"title\":\"异常_Object\",\"link\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":{},\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"基础API\",\"link\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":{},\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"常用API\",\"link\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":{},\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"多线程（一）\",\"link\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":{},\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"多线程（二）\",\"link\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":{},\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"集合（一）\",\"link\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":{},\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"集合（二）\",\"link\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":{},\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"Map集合\",\"link\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":{},\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"IO流（一）\",\"link\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":{},\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"}},{\"title\":\"IO流（二）\",\"link\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":{},\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"}},{\"title\":\"网络编程_正则表达式_设计模式\",\"link\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":{},\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"jdk新特性\",\"link\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":{},\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"反射_注解\",\"link\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":{},\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}}]},{\"title\":\"spring\",\"children\":[{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"link\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":{},\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"}},{\"title\":\"spring-token无状态权限验证\",\"link\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":{},\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"Spring框架：IOC和AOP的理解\",\"link\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":{},\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}}]},{\"title\":\"SQL\",\"children\":[{\"title\":\"SQL优化\",\"link\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":{},\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}}]}]},\"02.前端/目录\":{\"path\":\"02.前端\",\"catalogues\":[]},\"03.运维/目录\":{\"path\":\"03.运维\",\"catalogues\":[{\"title\":\"docker\",\"children\":[{\"title\":\"docker命令学习\",\"link\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":{},\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"docker-compose命令学习\",\"link\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":{},\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}}]},{\"title\":\"linux\",\"children\":[{\"title\":\"Linux安装Tesseract\",\"link\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":{},\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"Linux中jar启动脚本\",\"link\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":{},\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"}},{\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"link\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":{},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}}]}]}},\"inv\":{\"01.后端\":{\"filePath\":\"01.后端/目录\",\"catalogues\":[{\"title\":\"java\",\"children\":[{\"title\":\"环境变量-HelloWorld\",\"link\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":{},\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"变量_数据类型转换_运算符\",\"link\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":{},\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"运算符\",\"link\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":{},\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"流程控制\",\"link\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":{},\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"数组\",\"link\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":{},\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"方法\",\"link\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":{},\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"面向对象（一）\",\"link\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":{},\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}},{\"title\":\"面向对象（二）\",\"link\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":{},\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"面向对象（三）\",\"link\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":{},\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（四）\",\"link\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":{},\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}},{\"title\":\"面向对象（五）\",\"link\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":{},\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}},{\"title\":\"面向对象（六）\",\"link\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":{},\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"}},{\"title\":\"异常_Object\",\"link\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":{},\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"基础API\",\"link\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":{},\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"}},{\"title\":\"常用API\",\"link\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":{},\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"多线程（一）\",\"link\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":{},\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}},{\"title\":\"多线程（二）\",\"link\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":{},\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"集合（一）\",\"link\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":{},\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"集合（二）\",\"link\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":{},\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"Map集合\",\"link\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":{},\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"}},{\"title\":\"IO流（一）\",\"link\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":{},\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"}},{\"title\":\"IO流（二）\",\"link\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":{},\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"}},{\"title\":\"网络编程_正则表达式_设计模式\",\"link\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":{},\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}},{\"title\":\"jdk新特性\",\"link\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":{},\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"}},{\"title\":\"反射_注解\",\"link\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":{},\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"}}]},{\"title\":\"spring\",\"children\":[{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"link\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":{},\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"}},{\"title\":\"spring-token无状态权限验证\",\"link\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":{},\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"}},{\"title\":\"Spring框架：IOC和AOP的理解\",\"link\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":{},\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"}}]},{\"title\":\"SQL\",\"children\":[{\"title\":\"SQL优化\",\"link\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":{},\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"}}]}]},\"02.前端\":{\"filePath\":\"02.前端/目录\",\"catalogues\":[]},\"03.运维\":{\"filePath\":\"03.运维/目录\",\"catalogues\":[{\"title\":\"docker\",\"children\":[{\"title\":\"docker命令学习\",\"link\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":{},\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"}},{\"title\":\"docker-compose命令学习\",\"link\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":{},\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"}}]},{\"title\":\"linux\",\"children\":[{\"title\":\"Linux安装Tesseract\",\"link\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":{},\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"}},{\"title\":\"Linux中jar启动脚本\",\"link\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":{},\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"}},{\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"link\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":{},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"}}]}]}}},\"posts\":{\"allPosts\":[{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/01.后端/目录\",\"frontmatter\":{\"title\":\"Java基础\",\"date\":\"2024-12-23 19:18:56\",\"permalink\":\"/service\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"01.后端\",\"desc\":\"后端技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"后端技术\"],\"coverImg\":\"https://cdn.luoyuanxiang.tophttps://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"Java基础\",\"date\":\"2024-12-23 19:18:56\",\"capture\":\"\"},{\"url\":\"/02.前端/目录\",\"frontmatter\":{\"title\":\"前端\",\"date\":\"2024-12-23 19:18:56\",\"permalink\":\"/web\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"02.前端\",\"desc\":\"前端技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"前端\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"前端\",\"date\":\"2024-12-23 19:18:56\",\"capture\":\"\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"},{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/03.运维/目录\",\"frontmatter\":{\"title\":\"运维\",\"date\":\"2024-12-23 19:18:56\",\"permalink\":\"/operations\",\"layout\":\"page\",\"catalogue\":true,\"path\":\"03.运维\",\"desc\":\"运维技术\",\"sidebar\":false,\"article\":false,\"categories\":[\"运维技术\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"运维\",\"date\":\"2024-12-23 19:18:56\",\"capture\":\"\"},{\"url\":\"/20.文档/100.关于我\",\"frontmatter\":{\"title\":\"关于我\",\"date\":\"2025-01-03 11:19:48\",\"permalink\":\"/about-me\",\"layout\":\"page\",\"categories\":[\"更多\"],\"tags\":[\"关于我\"],\"author\":{\"name\":\"老罗の小站\",\"link\":\"https://luoyuanxiang.top/\"},\"sidebar\":false,\"article\":false,\"comment\":false,\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/10.webp\"},\"title\":\"关于我\",\"date\":\"2025-01-03 11:19:48\",\"capture\":\"&lt;script setup\\nimport About from '../.vitepress/theme/components/About.vue'\\n&lt;/script&gt;\\n&lt;About /&gt;\"},{\"url\":\"/20.文档/110.网站导航\",\"frontmatter\":{\"title\":\"网站导航\",\"date\":\"2025-03-04 12:37:55\",\"permalink\":\"/websites\",\"categories\":[\"关于\"],\"sidebar\":false,\"article\":false,\"comment\":false,\"themeSize\":\"wide\",\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"网站导航\",\"date\":\"2025-03-04 12:37:55\",\"capture\":\"&lt;!-- index.md --\\n&lt;!-- 五彩纸屑组件 --&gt;\\n&lt;confetti /&gt;\\n Teek网站\\n```yaml\\n- name: Teek\\n  desc: Teek官网\\n  img: /teek-logo-large.png\\n  link: https://vp.teek.top/\\n- name: 天客 - Teeker\\n  desc: 朝圣的使徒，正在走向编程的至高殿堂！（Teek作者，大佬666）\\n  img: https://cdn.luoyuanxiang.top/img/website/notes.teek.top.png\\n  link: ht\"},{\"url\":\"/20.文档/115.留言区\",\"frontmatter\":{\"title\":\"留言区\",\"date\":\"2022-02-27 22:32:38\",\"permalink\":\"/liuyanqu\",\"categories\":[null],\"tags\":[null],\"sidebar\":false,\"article\":false,\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"留言区\",\"date\":\"2022-02-27 22:32:38\",\"capture\":\"&lt;iframe class=\\\"c-viewer__iframe\\\" src=\\\"https://sketchfab.com/models/9af0ae87238a4840b95a83f9e6c5cdde/embed?autostart=1&amp;\\\" id=\\\"api-frame\\\" allow=\\\"autoplay; xr-spatial-tracking\\\" xr-spatial-tracking=\\\"true\\\" allowfullscreen=\\\"\\\" width=\\\"100%\\\" height=\\\"300\\\"\\n如果大家遇到了什么问题，欢迎大家留言讨论。\\n如果 10s 后评论区还在转圈，可以尝试刷新页面。\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/@pages/archivesPage\",\"frontmatter\":{\"title\":\"归档\",\"permalink\":\"/archives\",\"archivesPage\":true,\"layout\":\"page\",\"article\":false,\"sidebar\":false},\"title\":\"归档\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/@pages/articleOverviewPage\",\"frontmatter\":{\"title\":\"文章清单\",\"permalink\":\"/articleOverview\",\"articleOverviewPage\":true,\"layout\":\"page\",\"article\":false,\"sidebar\":false},\"title\":\"文章清单\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/@pages/categoriesPage\",\"frontmatter\":{\"title\":\"分类\",\"categoriesPage\":true,\"permalink\":\"/categories\",\"article\":false,\"layout\":\"home\"},\"title\":\"分类\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/@pages/loginPage\",\"frontmatter\":{\"permalink\":\"/login\",\"layout\":false,\"loginPage\":true,\"logo\":\"/teek-logo-large.png\",\"leftImg\":\"/login/bg-1.png\",\"article\":false},\"title\":\"loginPage\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/@pages/riskLinkPage\",\"frontmatter\":{\"permalink\":\"/risk-link\",\"layout\":false,\"riskLinkPage\":true,\"logo\":\"https://cdn.luoyuanxiang.top/avatar.png\",\"name\":\"老罗の小站\",\"article\":false},\"title\":\"riskLinkPage\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/@pages/tagsPage\",\"frontmatter\":{\"title\":\"标签\",\"permalink\":\"/tags\",\"tagsPage\":true,\"article\":false,\"layout\":\"home\"},\"title\":\"标签\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"\"},{\"url\":\"/\",\"frontmatter\":{\"layout\":\"home\",\"tk\":{\"teekHome\":false},\"hero\":{\"name\":\"Teek\",\"text\":\"VitePress 主题\",\"tagline\":\"✨一个轻量、简洁高效、灵活配置，易于扩展的 VitePress 主题\",\"actions\":[{\"theme\":\"brand\",\"text\":\"开始\",\"link\":\"/guide/quickstart\"},{\"theme\":\"alt\",\"text\":\"配置\",\"link\":\"/reference/config\"}],\"image\":{\"src\":\"/teek-logo-large.png\",\"alt\":\"Teek\"}},\"features\":[{\"icon\":\"📖\",\"title\":\"结构化 && 体系化\",\"details\":\"自动生成侧边栏、目录页、索引页、面包屑等，轻松构建一个结构化知识库。\"},{\"icon\":\"🎉\",\"title\":\"碎片化 & 个性化\",\"details\":\"提供快速构建知识的碎片化形态，并提供大量个性化的主题配置。\"},{\"icon\":\"🎇\",\"title\":\"文档风 & 博客风\",\"details\":\"支持通过配置随意切换两种模式，支持个人博客、文档站、知识库等场景。\"},{\"icon\":\"📝\",\"title\":\"专注内容\",\"details\":\"只需 Markdown 即可轻松创建美观的文档站点，配合多维索引快速定位每个知识点。\"}]},\"title\":\"\",\"date\":\"2025-09-06 01:12:21\",\"capture\":\"&lt;!--  💡 反馈交流\\n在使用过程中有任何问题和想法，请给我提 Issue。 你也可以在 Issue 查看别人提的问题和解决方案。\\n或者加入我们的交流群（添加我的微信并备注 &lt;mark\\n&lt;img src=\\\"https://gcore.jsdelivr.net/gh/Kele-Bingtang/static/index/20250412000919.png\\\" alt=\\\"添加我微信备注「进群」\\\" style=\\\"width: 180px;\\\" /&gt;\\n如果图片链接失效，可以在微信右上角 -&gt; 添加朋友，然后搜索 `teekers` 来添加我的微信。 --&gt;\\n&lt\"}],\"originPosts\":[{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"},{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"}],\"sortPostsByDateAndSticky\":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"},{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}],\"sortPostsByDate\":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"},{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}],\"groupPostsByYear\":{\"2025 \":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"}],\"2024 \":[{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"}],\"2023 \":[{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}]},\"groupPostsByYearMonth\":{\"2025 \":{\"08\":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"}]},\"2024 \":{\"10\":[{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"}]},\"2023 \":{\"08\":[{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}]}},\"groupPosts\":{\"categories\":{\"运维\":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"},{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"},{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"}],\"linux\":[{\"url\":\"/03.运维/02.linux/03.阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"frontmatter\":{\"date\":\"2025-08-08 14:23:12\",\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"permalink\":\"/pages/95722d\",\"categories\":[\"运维\",\"linux\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\",\"date\":\"2025-08-08 14:23:12\",\"capture\":\"阿里云服务器（AnolisOS-8.8-x86_64）内网升级openssh记录\\n 1. 准备工作\\n 测试机器版本\\n 准备离线依赖包\\n1. 需要联网操作\\n```shell\\ndnf install -y yum-utils\\n```\\n2. 建立下载目录\\n```shell\\nmkdir -p ~/offline-rpms\\ncd ~/offline-rpms\\n```\\n3. 一次性下载目标包和依赖包\\n```shell\\ndnf install --downloadonly --downloaddir=./rpms \\\\\\n    gcc make openssl-devel zlib-devel pam-dev\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}],\"后端\":[{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"},{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"},{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"}],\"spring\":[{\"url\":\"/01.后端/02.spring/Spring框架：IOC和AOP的理解\",\"frontmatter\":{\"date\":\"2025-08-08 14:21:28\",\"title\":\"Spring框架：IOC和AOP的理解\",\"permalink\":\"/service/861936\",\"categories\":[\"后端\",\"spring\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"Spring框架：IOC和AOP的理解\",\"date\":\"2025-08-08 14:21:28\",\"capture\":\"Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework  \\n中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。  \\n本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用  \\nSpring Framework。\\n 一、IOC\\n什么是IOC\\n-   IOC（Inversion of Control，控制反转）是 Spring Framework \"}],\"docker\":[{\"url\":\"/03.运维/01.docker/02.docker-compose命令学习\",\"frontmatter\":{\"date\":\"2025-08-08 14:19:15\",\"title\":\"docker-compose命令学习\",\"permalink\":\"/operations/4a9405\",\"categories\":[\"运维\",\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"docker-compose命令学习\",\"date\":\"2025-08-08 14:19:15\",\"capture\":\"```yaml\\nversion: \\\"3.8\\\"\\nservices:\\n  redis:\\n    image: redis:alpine\\n    ports:\\n      - \\\"6379\\\"\\n    networks:\\n      - frontend\\n    deploy:\\n      replicas: 2\\n      update_config:\\n        parallelism: 2\\n        delay: 10s\\n      restart_policy:\\n        condition: on-failure\\n  db:\\n    image: postgres:9.4\\n  \"}],\"随笔\":[{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"}]},\"tags\":{\"Java\":[{\"url\":\"/01.后端/01.java/25.反射_注解\",\"frontmatter\":{\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"permalink\":\"/Java/ff0a44/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"反射_注解\",\"date\":\"2024-10-15 20:05:48\",\"capture\":\"```java\\n模块24重点回顾:\\n  1.Lambda表达式\\n    a.格式:\\n      () -\\n    b.使用条件:必须有函数式接口作为方法参数传递(有且只有一个抽象方法的接口叫做函数式接口,带@FunctionalInterface)\\n  2.新手怎么入门:\\n    a.观察是否是函数式接口作为方法参数传递\\n    b.如果是,考虑使用Lambda表达式\\n    c.调用方法,以匿名内部类形式传递实参\\n    d.从new接口开始到重写方法的方法名结束,选中,删除,别忘记删除右半个大括号\\n    e.在重写方法的参数后面以及方法体之间加-&gt;\\n  3.省略规则:\\n    a.\"},{\"url\":\"/01.后端/01.java/24.jdk新特性\",\"frontmatter\":{\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"permalink\":\"/Java/e2e3a9/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"jdk新特性\",\"date\":\"2024-10-15 19:29:12\",\"capture\":\"```java\\n模块23回顾:\\n  1.网编:\\n    a.概述:在网络通信协议下,不同计算机上运行的程序\\n    b.软件架构:  cs  bs(java主要从事bs开发)\\n    c.服务器:安装了服务器软件的计算机\\n    d.通信三要素:  IP地址 协议 端口号\\n    e.协议:\\n      UDP:面向无连接协议\\n      TCP:面向连接协议 -\\n    f.UDP:  DatagramSocket  DatagramPacket\\n            send(dp)   receive(dp)\\n      TCP:  Socket   ServerSocket\\n    \"},{\"url\":\"/01.后端/01.java/23.网络编程_正则表达式_设计模式\",\"frontmatter\":{\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"permalink\":\"/Java/74ed07/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"网络编程_正则表达式_设计模式\",\"date\":\"2024-10-15 19:23:54\",\"capture\":\"```java\\n模块22回顾\\n   1.字节缓冲流:\\n     BufferedOutputStream -\\n     BufferedInputStream -&gt; 用法和FIleInputStream一样\\n         \\n   2.字符缓冲流:\\n     BufferedWriter -&gt; 用法和FileWriter一样\\n           特有方法:newLine()换行\\n     BufferedReader -&gt; 用法和FileReader一样\\n           特有方法:readLine()一次读一行\\n               \\n   3.转换流:\\n \"},{\"url\":\"/01.后端/01.java/22.IO流（二）\",\"frontmatter\":{\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"permalink\":\"/Java/c1b253/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/19.webp\"},\"title\":\"IO流（二）\",\"date\":\"2024-10-15 19:20:23\",\"capture\":\"```java\\n模块21回顾:\\n  1.File:代表的是文件或者文件夹对象\\n  2.静态成员:\\n    pathSeparator:获取的是路径和路径之间的分隔符  ;\\n    separator:获取的是路径名称分隔符 \\\\\\n  3.构造:\\n    File(String parent,String child)\\n    File(File parent,String child)\\n    File(String path)\\n  4.获取方法:\\n    getAbsolutePath()获取绝对路径\\n    getPath()获取封装路径\\n    getName()获取文件或者文件夹名称\\n \"},{\"url\":\"/01.后端/01.java/21.IO流（一）\",\"frontmatter\":{\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"permalink\":\"/Java/be8a93/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/12.webp\"},\"title\":\"IO流（一）\",\"date\":\"2024-10-15 19:18:16\",\"capture\":\"```java\\n模块20回顾:\\n  1.HashMap\\n    a.特点:无序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表\\n    c.方法:put remove get keySet entrySet  values  containsKey\\n  2.LinkedHashMap:\\n    a.特点:有序,无索引,key唯一,线程不安全,可以存null键null值\\n    b.数据结构:哈希表+双向链表\\n        \\n  3.key如何去重复:重写hashCode和equals方法\\n      \\n  4.TreeSet:是set接口实现类\\n  \"},{\"url\":\"/01.后端/01.java/20.Map集合\",\"frontmatter\":{\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"permalink\":\"/Java/5a9965/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"Map集合\",\"date\":\"2024-10-15 19:14:58\",\"capture\":\"```java\\n模块19回顾:\\n  1.Collections集合工具类\\n    方法:\\n        addAll-\\n        shuffle-&gt; 元素打乱\\n        sort-&gt;排序-&gt; ascii\\n        sort(集合,比较器)-&gt; 按照指定的顺序排序\\n  2.泛型:\\n    a.含有泛型的类:\\n      public class 类名&lt;E&gt;{}\\n      new对象的时候确定类型\\n    b.含有泛型的方法:\\n      修饰符 &lt;E&gt; 返回值类型 方法名(E e){}\\n      调用的时候确定类型\\n    \"},{\"url\":\"/01.后端/01.java/19.集合（二）\",\"frontmatter\":{\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"permalink\":\"/Java/20004d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/7.webp\"},\"title\":\"集合（二）\",\"date\":\"2024-10-15 19:11:13\",\"capture\":\"```java\\n模块18回顾:\\n  1.Collection集合:单列集合的顶级接口\\n    a.add  addAll  clear size  isEmpty  remove  toArray  contains\\n  2.迭代器:Iterator\\n    a.获取:iterator方法\\n    b.方法:\\n      hasNext()\\n      next()\\n    c.并发修改异常:在迭代集合的时候,不能随意修改集合长度\\n      原因:调用add,只给实际操作次数+1.后面调用next的时候,没有给预期操作次数重新赋值,导致预期操作次数和实际操作次数不相等了\\n          \"},{\"url\":\"/01.后端/01.java/18.集合（一）\",\"frontmatter\":{\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"permalink\":\"/Java/90c991/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"集合（一）\",\"date\":\"2024-10-15 18:45:44\",\"capture\":\"```java\\n模块17重点回顾:\\n  1.wait和notify\\n    a.wait:线程等待,在等待过程中释放锁,需要其他线程调用notify唤醒\\n    b.notify:唤醒一条等待的线程,如果多条线程等待,随机一条唤醒\\n    c.notifyAll:唤醒所有等待线程\\n  2.Lock:锁\\n    方法:lock()获取锁   unlock()释放锁\\n  3.线程池:Executors\\n    a.获取:static ExecutorService newFixedThreadPool(int nThread)\\n    b.提交线程任务:\\n      submit(Runnable\"},{\"url\":\"/01.后端/01.java/17.多线程（二）\",\"frontmatter\":{\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"permalink\":\"/Java/36d001/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"多线程（二）\",\"date\":\"2024-10-15 18:42:08\",\"capture\":\"```java\\n模块16回顾:\\n  1.创建多线程:\\n    继承Thread\\n          a.定义一个类,继承Thread\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象\\n          d.调用start方法,开启线程,jvm自动执行run方法\\n    实现Runnable接口:\\n          a.定义一个类,实现Runnable\\n          b.重写run方法,设置线程任务\\n          c.创建自定义线程对象,传递到Thread对象中\\n          d.调用start方法,开启线程,jvm自动调用r\"},{\"url\":\"/01.后端/01.java/16.多线程（一）\",\"frontmatter\":{\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"permalink\":\"/Java/50ef81/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"多线程（一）\",\"date\":\"2024-10-15 18:37:16\",\"capture\":\"```java\\n模块15回顾:\\n  1.Math:数学工具类\\n    abs ceil floor round max min\\n  2.BigInteger:处理超大整数\\n    a.构造:BigInteger(String s)\\n    b.方法:\\n      add  subtract multiply divide\\n          \\n  3.BigDecimal:处理小数直接做运算而产生的精度损失问题\\n    a.构造:BigDecimal(String s)\\n    b.方法: add  subtract multiply divide valueOf(double b)   \\n \"},{\"url\":\"/01.后端/01.java/15.常用API\",\"frontmatter\":{\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"permalink\":\"/Java/3e5b8d/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/16.webp\"},\"title\":\"常用API\",\"date\":\"2024-10-14 23:25:24\",\"capture\":\"``` java\\n模块14回顾:\\n  String:\\n    1.构造:\\n      String()  String(String s) String(char[] chars) String(byte[] bytes)\\n      String(char[] chars,int offset,int count) String(byte[] chars,int offset,int count)\\n   \\n    2.判断方法:\\n      equals   equalsIgnoreCase\\n          \\n    3.获取方法:\\n      length()  concat(Stri\"},{\"url\":\"/01.后端/01.java/14.基础API\",\"frontmatter\":{\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"permalink\":\"/Java/bc3bbd/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"基础API\",\"date\":\"2024-10-14 23:21:12\",\"capture\":\"```java\\n模块13回顾:\\n  1.异常:\\n    a.分类:Throwable\\n      Error:错误\\n      Exception:异常\\n          编译时期异常:一编译,就爆红(主要还是调用了某个方法,某个方法底层抛了一个编译时期异常)\\n                      Exception以及子类(除了RuntimeException之外)\\n          运行时期异常:一运行就报错\\n                     RuntimeException以及子类\\n 2.异常处理:\\n   throws\\n   try...catch\\n     \\n 3.f\"},{\"url\":\"/01.后端/01.java/13.异常_Object\",\"frontmatter\":{\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"permalink\":\"/Java/b73647/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"异常_Object\",\"date\":\"2024-10-14 23:18:30\",\"capture\":\"```java\\n模块十二回顾:\\n  1.权限修饰符:\\n    public -\\n    \\n    a.构造一般用public :便于new对象\\n    b.成员方法一般用public:便于调用\\n    c.属性一般用private:封装思想\\n        \\n  2.final:最终的\\n    a.修饰类:不能被继承的\\n    b.修饰方法:不能被重写\\n    c.修饰局部变量:不能被二次赋值\\n    d.修饰对象:地址值不能改变,但是对象中的属性值可以改变\\n    e.修饰成员变量:需要手动赋值,不能二次赋值\\n        \\n  3.代码块:\\n    a.构造代码块:\\n      {}\\n \"},{\"url\":\"/01.后端/01.java/12.面向对象（六）\",\"frontmatter\":{\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"permalink\":\"/Java/2f3df1/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/18.webp\"},\"title\":\"面向对象（六）\",\"date\":\"2024-10-14 23:14:53\",\"capture\":\"```java\\n模块11回顾:\\n  1.接口:\\n    a.interface 接口\\n    b.implements 实现\\n  2.成员:\\n    a.抽象方法 -\\n    b.默认方法 -&gt; public default 返回值类型 方法名(参数){} -&gt; 实现类中可重写可不重写\\n    c.静态方法 -&gt; public static 返回值类型 方法名(参数){} -&gt; 接口名直接调用\\n    d.成员变量 -&gt; public static final 数据类型 变量名 = 值 -&gt; 接口名直接调用\\n  3.接口的特点:\\n    a.接口支持多继承\\n\"},{\"url\":\"/01.后端/01.java/11.面向对象（五）\",\"frontmatter\":{\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"permalink\":\"/Java/c12280/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（五）\",\"date\":\"2024-10-14 23:12:15\",\"capture\":\"```java\\n模块十回顾:\\n  1.继承:子类继承父类,可以直接使用父类中非私有成员,子类不用写重复性代码\\n  2.关键字: extends \\n  3.成员访问特点:\\n    a.成员变量:看等号左边是谁\\n    b.成员方法:看new的是谁\\n  4.方法的重写:子类中有一个和父类从方法名以及参数列表上一样的方法\\n    a.检测:@Override\\n    b.使用场景:功能的升级\\n  5.继承中构造的特点:\\n    new子类对象先初始化父类\\n  6.super:代表的是父类引用\\n    a.调用父类构造:super()   super(实参)\\n    b.调用父类成员变量: super\"},{\"url\":\"/01.后端/01.java/10.面向对象（四）\",\"frontmatter\":{\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"permalink\":\"/Java/c0363b/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/13.webp\"},\"title\":\"面向对象（四）\",\"date\":\"2024-10-14 23:08:45\",\"capture\":\"```java\\n模块十重点:\\n  1.知道继承的好处\\n  2.会使用继承\\n  3.知道继承之后成员变量以及成员方法的访问特点\\n  4.会方法的重写,以及知道方法重写的使用场景\\n  5.会使用this关键字调用当前对象中的成员\\n  6.会使用super关键字调用父类中的成员\\n  7.会定义抽象方法以及抽象类\\n  8.会重写抽象方法\\n```\\n 第一章.继承\\n 1.什么是继承\\n```java\\n1.父类怎么形成的:我们的定义了多个类,发现这些类中有很多重复性的代码,我们就定义了一个父类,将相同的代码抽取出来放到父类中,其他的类直接继承这个父类,就可以直接使用父类中的内容了\\n2.怎么去继承: exten\"},{\"url\":\"/01.后端/01.java/09.面向对象（三）\",\"frontmatter\":{\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"permalink\":\"/Java/c63177/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/2.webp\"},\"title\":\"面向对象（三）\",\"date\":\"2024-10-14 17:42:44\",\"capture\":\"```java\\n模块八重点:\\n  1.封装:\\n    a.将细节隐藏起来,不让外界直接调用,再提供公共接口,供外界通过公共接口间接使用隐藏起来的细节\\n    b.代表性的:\\n      将一段代码放到一个方法中(隐藏细节),通过方法名(提供的公共接口)去调用\\n      private关键字 -\\n          \\n    c.get/set方法\\n      set方法:为属性赋值\\n      get方法:获取属性值\\n          \\n    d.this关键字:代表当前对象,哪个对象调用this所在的方法this就代表哪个对象\\n      区分重名的成员变量和局部变量\\n        \"},{\"url\":\"/01.后端/01.java/08.面向对象（二）\",\"frontmatter\":{\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"permalink\":\"/Java/d4be95/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"面向对象（二）\",\"date\":\"2024-10-14 17:36:43\",\"capture\":\"```java\\n模块七回顾:\\n  1.面向对象:是java的核心编程思想,自己的事情找对象帮我们去做\\n            有很多功能,别人帮我们实现好了,我们只需要找来这个对象,就可以调用这个对象中实现好的功能\\n    a.啥时候使用面向对象思想编程:在一个类中想访问另外一个类的成员(成员变量,成员方法)\\n    b.怎么使用:\\n      new对象 ,点成员\\n      特殊 :类名直接调用 -\\n  2.类和对象:\\n    a.类:实体类\\n        属性(成员变量)  行为(成员方法,不带static的方法)\\n    b.对象:\\n      导包:两个类在同一个包下,使用对方的成\"},{\"url\":\"/01.后端/01.java/07.面向对象（一）\",\"frontmatter\":{\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"permalink\":\"/Java/4e3824/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/4.webp\"},\"title\":\"面向对象（一）\",\"date\":\"2024-10-14 17:33:05\",\"capture\":\"```java\\n模块六回顾:\\n  1.概述:拥有功能性代码的代码块\\n    将来干开发一个功能就应该对应一个方法\\n  2.方法的通用定义格式:\\n    修饰符 返回值类型 方法名(参数){\\n        方法体\\n        return 结果\\n    }\\n    a.修饰符:public static\\n    b.返回值类型:方法最终返回的结果的数据类型\\n    c.方法名:给方法取的名字,见名知意,小驼峰式\\n    d.参数:进入到方法内部参与执行的数据\\n    e.方法体:具体实现该方法的具体代码\\n    f.return 结果:该方法操作完参数之后,最终返回的一个数据\\n      \"},{\"url\":\"/01.后端/01.java/06.方法\",\"frontmatter\":{\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"permalink\":\"/Java/85f076/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"方法\",\"date\":\"2024-10-14 17:27:39\",\"capture\":\"```java\\n 模块五的重点回顾:\\n   1.概述:容器,本身属于引用数据类型\\n   2.特点:\\n     a.定长\\n     b.既可以存储基本数据类型的数据,还可以存储引用数据类型的数据\\n   3.定义:\\n     动态初始化: 数据类型[] 数组名 = new 数据类型[长度]\\n     静态初始化: 数据类型[] 数组名 = {元素1,元素2...}\\n   4.数组操作:\\n     a.获取数组长度: 数组名.length\\n     b.存储数据: 数组名[索引值] = 元素 -\\n     c.获取元素: 数组名[索引值]\\n     d.遍历: 数组名.fori\\n     e.索引:\"},{\"url\":\"/01.后端/01.java/05.数组\",\"frontmatter\":{\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"permalink\":\"/Java/716d45/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/1.webp\"},\"title\":\"数组\",\"date\":\"2024-10-14 17:12:48\",\"capture\":\"```java\\n课前回顾:\\n   1.Scanner:\\n    a.导包: import java.util.Scanner\\n    b.创建对象:Scanner 名字 = new Scanner(System.in)\\n    c.调用方法:\\n      nextInt()录入一个整数\\n      next()录入一个字符串,遇到空格和回车就结束\\n      nextLine()录入一个字符串,遇到回车就结束\\n  2.switch:选择语句\\n    a.格式:\\n      switch(变量){\\n          case 常量值1:\\n              执行语句1;\\n       \"},{\"url\":\"/01.后端/01.java/04.流程控制\",\"frontmatter\":{\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"permalink\":\"/Java/cedb8e/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"流程控制\",\"date\":\"2024-10-11 22:26:48\",\"capture\":\"```java\\n模块三重点回顾:\\n  1.idea -\\n  2.算数运算符: + - * / %(取余数)\\n    +:字符串拼接 -&gt; 内容直接往后拼接\\n        \\n    自增自减:++ --\\n        a.单独使用:符号在前在后都是先运算\\n        b.混合使用:符号在前先运算,再使用运算后的值\\n                  符号在后先使用原值,再运算\\n            \\n  3.赋值运算符:\\n    = += -= *= /= %=\\n  4.比较运算符:结果都是boolean型的\\n    == &gt; &lt; &gt;= &lt;= !=    \"},{\"url\":\"/01.后端/01.java/03.运算符\",\"frontmatter\":{\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"permalink\":\"/Java/57aa12/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/3.webp\"},\"title\":\"运算符\",\"date\":\"2024-10-11 19:28:51\",\"capture\":\"```java\\n模块二的回顾:\\n  1.常量:在代码的运行过程中,值不会发生改变的数据\\n    a.整数常量:所有的整数\\n    b.小数常量:所有带小数点的  2.0\\n    c.字符常量:带单引号的,单引号中必须有,且只能有一个内容\\n    d.字符串常量:带双引号的\\n    e.布尔常量:true false -\\n    f.空常量:null 代表数据不存在,所以不能直接使用\\n  2.变量:在代码的运行过程中,会根据不同的情况而随时可以改变的数据\\n    a.定义:\\n      数据类型 变量名 = 值 -&gt; 将等号右边的值赋值给等号左边的变量\\n    b.数据类型:\\n      \"},{\"url\":\"/01.后端/01.java/02.变量_数据类型转换_运算符\",\"frontmatter\":{\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"permalink\":\"/Java/e0305c/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"变量_数据类型转换_运算符\",\"date\":\"2024-10-11 19:07:31\",\"capture\":\"```java\\n1.字节:计算机存储数据的最小存储单元(byte或者B)\\n  8bit = 1B -\\n2.常用的dos命令\\n  a.切换盘符   盘符名:\\n  b.查看       dir\\n  c.进入指定文件夹   cd 文件夹名     cd 文件夹名\\\\文件夹名\\n  d.退到上一级   cd..\\n  e.退到根目录   cd\\\\\\n  f.清屏      cls\\n  g.退出黑窗口   exit\\n  h.创建文件夹   mkdir 文件夹名      mkdir 文件夹名\\\\文件夹名\\n  i.删除文件夹   rd 文件夹名     被删除的文件夹必须是空的,删除之后不走回收站\\n  j.删除文件 \"},{\"url\":\"/01.后端/01.java/01.环境变量-HelloWorld\",\"frontmatter\":{\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"permalink\":\"/Java/097883/\",\"categories\":[\"后端\"],\"tags\":[\"Java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"环境变量-HelloWorld\",\"date\":\"2024-10-11 18:35:37\",\"capture\":\"```java\\n1.会常用的dos命令\\n2.会安装java所需要的环境(jdk)\\n3.会配置java的环境变量\\n4.知道java开发三步骤\\n5.会java的入门程序(HelloWorld)\\n6.会三种注释方式\\n7.知道Java入门程序所需要注意的地方\\n8.知道println和print的区别\\n```\\n 第一章 Java概述\\n 1.1 JavaSE课程体系介绍\\nJavaSE知识图解\\nJavaSE知识模块介绍\\n* 第一部分：计算机编程语言核心结构：`数据类型`、`运算符`、`流程控制`、`数组`、…  \\n  (没有为啥,按照格式定义)\\n* 第二部分：Java面向对象核心逻辑：`类和对象`、`封装`\"},{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}],\"Tesseract\":[{\"url\":\"/03.运维/02.linux/01.Linux安装Tesseract\",\"frontmatter\":{\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"permalink\":\"/operations/1466cc/\",\"categories\":[\"运维\"],\"tags\":[\"Tesseract\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/11.webp\"},\"title\":\"Linux安装Tesseract\",\"date\":\"2024-10-10 18:23:59\",\"capture\":\"下载需要的包\\n tesseract 需要单独下载\\n```shell\\nhttps://github.com/tesseract-ocr/tesseract/releases/tag/5.3.3\\n```\\n 下载leptonica\\n```shell\\nwget http://www.leptonica.org/source/leptonica-1.78.0.tar.gz\\n```\\n 安装依赖\\n 解压leptonica\\n```shell\\ntar -xvf leptonica-1.78.0.tar.gz\\n```\\n 配置编译安装leptonica,进入到文件夹中\\n```shell\\n./configure\\nma\"}],\"java\":[{\"url\":\"/@fragment/01.Java代码性能优化总结\",\"frontmatter\":{\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"categories\":[\"随笔\"],\"tags\":[\"java\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\",\"permalink\":\"/Java/optimize\"},\"title\":\"Java代码性能优化总结\",\"date\":\"2024-10-10 07:10:53\",\"capture\":\"代码优化，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。代码优化也是一样，如果项目着眼于尽快无 BUG 上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。\\n代码优化的目标是：\\n1、减小代码的体积\\n2、提高代码运行的效率\\n 代码优化细节\\n1、尽量指定类、方法的 `final` 修\"},{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"}],\"spring\":[{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"}],\"spring boot\":[{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"},{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"}],\"线程池\":[{\"url\":\"/01.后端/02.spring/01.spring多线程实现+合理设置最大线程数和核心线程数\",\"frontmatter\":{\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/5b4277/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"java\",\"spring boot\",\"线程池\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/9.webp\"},\"title\":\"spring多线程实现+合理设置最大线程数和核心线程数\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"&lt;h2 id=\\\"f2uP7\\\"\\n&lt;h2 id=\\\"articleContentId\\\"&gt;&lt;font style=\\\"color:rgb(79, 79, 79);\\\"&gt;手动设置线程池，就要合理设置最大线程数和核心线程数，按照网上大多数的说法，都是跟服务器的CPU有关&lt;/font&gt;&lt;/h2&gt;\\n1. &lt;font style=\\\"color:rgb(77, 77, 77);\\\"&gt;先看下机器的CPU核数，然后在设定具体参数：&lt;/font&gt;\\n```java\\nSystem.out.println(Runtime.getRuntime().ava\"}],\"shiro\":[{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"}],\"jwt\":[{\"url\":\"/01.后端/02.spring/02.spring-token无状态权限验证\",\"frontmatter\":{\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/db0f12/\",\"categories\":[\"后端\"],\"tags\":[\"spring\",\"spring boot\",\"java\",\"shiro\",\"jwt\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/8.webp\"},\"title\":\"spring-token无状态权限验证\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"一、思路\\n`shiro` 用来认证用户及权限控制，`jwt`用来生成一个`token`，暂存用户信息。\\n为什么不使用`session`而使用`jwt`？传统情况下是只有一个服务器，用户登陆后将一些信息以session的形式存储服务器上，\\n然后将`sessionid`存储在本地`cookie`中，当用户下次请求时将会将`sessionid`传递给服务器，用于确认身份。\\n但如果是分布式的情况下会出现问题，在服务器集群中，需要一个`session`数据库来存储每一个session，提供给集群中所有服务使用，且无法跨域(多个Ip)使用。\\n而`jwt`是生成一个`token`存储在客户端，每次请求将其存\"}],\"SQL\":[{\"url\":\"/01.后端/03.SQL/01.SQL优化\",\"frontmatter\":{\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/service/18af80/\",\"categories\":[\"后端\"],\"tags\":[\"SQL\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/14.webp\"},\"title\":\"SQL优化\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。\\n2. 应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\\n```sql\\nselect id from t where num is null\\n```\\n最好不要给数据库留`NULL`，尽可能的使用`NOT NULL`填充数据库.\\n备注、描述、评论之类的可以设置为`NULL`，其他的，最好不要使用`NULL`。\\n不要以为`NULL`不需要空间，比如：`char(100)`型，在字段建立时，空间就固定了， 不管是否插入值（`NULL`也包含在内），\"}],\"docker\":[{\"url\":\"/03.运维/01.docker/01.docker命令学习\",\"frontmatter\":{\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"permalink\":\"/operations/47692b/\",\"categories\":[\"运维\"],\"tags\":[\"docker\"],\"coverImg\":\"https://cdn.luoyuanxiang.top/img/bg/17.webp\"},\"title\":\"docker命令学习\",\"date\":\"2024-10-09 23:10:53\",\"capture\":\"docker运行容器\\n```shell\\ndocker run -it -v G:/docker/mysql/data:/var/lib/mysql -v G:/docker/mysql/config/my.cnf:/etc/mysql/my.cnf --restart=always --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql\\ndocker run -it -v /var/lib/mysql:/var/lib/mysql -v /etc/mysql/my.cnf:/etc/mysql/my.cnf --restar\"}],\"shell\":[{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}],\"linux\":[{\"url\":\"/03.运维/02.linux/02.Linux中jar启动脚本\",\"frontmatter\":{\"title\":\"Linux中jar启动脚本\",\"tags\":[\"shell\",\"Java\",\"linux\"],\"categories\":[\"linux\"],\"date\":\"2023-08-06 23:40:52\",\"coverImg\":\"https://cdn.luoyuanxiang.top/cover/shell.webp\",\"permalink\":\"/operations/933d1e\"},\"title\":\"Linux中jar启动脚本\",\"date\":\"2023-08-06 23:40:52\",\"capture\":\"该脚本用于管理safirst-etmf-api-1.0.0.jar应用，支持通过端口号操作不同实例。提供四个命令参数：-s|--start启动服务，-stop停止服务，-c|--copy备份并拷贝新项目，-l|--log查看日志。各功能均需指定端口号（拷贝除外），通过nohup后台运行服务，停止时通过端口号查找进程并强制终止，日志查看实时追踪指定路径的日志文件。\\n 命令参数\\n* `-s|--start`: 启动脚本， 参数后面跟端口号\\n* `-stop`: 停止脚本，参数后面跟端口号\\n* `-c|--copy`: 拷贝脚本\\n* `-l|--log`: 查看日志，参数后面跟端口号\\n例如：\\n```\"}]}},\"groupCards\":{\"categories\":[{\"name\":\"运维\",\"length\":4},{\"name\":\"linux\",\"length\":2},{\"name\":\"后端\",\"length\":29},{\"name\":\"spring\",\"length\":1},{\"name\":\"docker\",\"length\":1},{\"name\":\"随笔\",\"length\":1}],\"tags\":[{\"name\":\"Java\",\"length\":26},{\"name\":\"Tesseract\",\"length\":1},{\"name\":\"java\",\"length\":3},{\"name\":\"spring\",\"length\":2},{\"name\":\"spring boot\",\"length\":2},{\"name\":\"线程池\",\"length\":1},{\"name\":\"shiro\",\"length\":1},{\"name\":\"jwt\",\"length\":1},{\"name\":\"SQL\",\"length\":1},{\"name\":\"docker\",\"length\":1},{\"name\":\"shell\",\"length\":1},{\"name\":\"linux\",\"length\":1}]}}},\"locales\":{},\"scrollOffset\":134,\"cleanUrls\":true}"));