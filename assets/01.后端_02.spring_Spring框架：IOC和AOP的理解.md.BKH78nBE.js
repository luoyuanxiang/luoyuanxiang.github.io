import{_ as i,c as a,o as n,aM as e}from"./chunks/framework.rpVorFPB.js";const o=JSON.parse('{"title":"Spring框架：IOC和AOP的理解","description":"","frontmatter":{"date":"2025-08-08T14:21:28.000Z","title":"Spring框架：IOC和AOP的理解","permalink":"/service/861936","categories":["后端","spring"],"coverImg":"https://cdn.luoyuanxiang.top/img/bg/2.webp"},"headers":[],"relativePath":"01.后端/02.spring/Spring框架：IOC和AOP的理解.md","filePath":"01.后端/02.spring/Spring框架：IOC和AOP的理解.md","lastUpdated":1757121101000}'),l={name:"01.后端/02.spring/Spring框架：IOC和AOP的理解.md"};function p(t,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="spring框架-ioc和aop的理解" tabindex="-1">Spring框架：IOC和AOP的理解 <a class="header-anchor" href="#spring框架-ioc和aop的理解" aria-label="Permalink to &quot;Spring框架：IOC和AOP的理解&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Spring Framework 是一个非常流行的开源框架，为 Java 应用程序提供了广泛的支持和功能。其中，IOC 和 AOP 是 Spring Framework<br> 中最重要的两个部分之一，也是 Spring Framework 能够如此受欢迎的关键所在。<br> 本文将深入浅出地解读 Spring 源码中的 IOC 和 AOP 部分，包含详细的解决思路和方案、有步骤和代码、有实际的案例，旨在帮助读者更好地理解和使用<br> Spring Framework。</p><h2 id="一、ioc" tabindex="-1">一、IOC <a class="header-anchor" href="#一、ioc" aria-label="Permalink to &quot;一、IOC&quot;">​</a></h2><p>什么是IOC</p><ul><li><p>IOC（Inversion of Control，控制反转）是 Spring Framework 的核心概念之一，它是一种面向对象编程的设计模式，用于实现松耦合和可重用的代码。<br> IOC 的基本思想是，将对象之间的依赖关系交由框架来管理，而不是由程序员手动编写代码来管理。</p></li><li><p>在传统的编程模型中，对象之间的依赖关系通常是硬编码在程序中的，这样会导致代码的耦合度很高，不利于代码的维护和重用。</p></li><li><p>而采用 IOC 模式可以将对象之间的依赖关系解耦，使得程序更加灵活、可扩展。</p></li></ul><h3 id="spring-ioc-的实现原理" tabindex="-1">Spring IOC 的实现原理 <a class="header-anchor" href="#spring-ioc-的实现原理" aria-label="Permalink to &quot;Spring IOC 的实现原理&quot;">​</a></h3><p>Spring IOC 的实现原理是通过容器来管理对象之间的依赖关系。<br> 容器在初始化时会读取配置文件，创建并装配对象，将它们注入到其他对象中，以实现对象之间的依赖关系。<br> Spring IOC 容器可以根据配置文件中的信息来创建对象、管理对象之间的依赖关系，并为对象注入属性。</p><p>在 Spring Framework 中，IOC 的实现主要依靠两个核心接口：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p><p><code>BeanFactory</code> 是 IOC 容器的最基本接口，提供了最简单的 IOC 容器的实现，而 <code>ApplicationContext</code> 是 <code>BeanFactory</code><br> 的一个子接口，提供了更多的功能，包括 AOP、事件传递、国际化等。<br> 下面我们来看一下 Spring IOC 的具体实现过程。</p><h4 id="_1-创建配置文件" tabindex="-1">（1）创建配置文件 <a class="header-anchor" href="#_1-创建配置文件" aria-label="Permalink to &quot;（1）创建配置文件&quot;">​</a></h4><p>首先，我们需要创建一个 XML 配置文件，用于描述对象之间的依赖关系。在配置文件中，我们需要定义 Bean 的名称、类名和属性值等信息。下面是一个简单的例子：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 用户接口 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.UserService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 用户接口 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.UserDaoImpl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 数据源 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.DataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_2-加载配置文件" tabindex="-1">（2）加载配置文件 <a class="header-anchor" href="#_2-加载配置文件" aria-label="Permalink to &quot;（2）加载配置文件&quot;">​</a></h4><p>在 Spring IOC 中，容器会在启动时自动加载配置文件，创建并初始化 IOC 容器。容器会解析 XML 配置文件，根据配置文件中的信息创建相应的<br> Bean，并将它们注册到 IOC 容器中。</p><p>在 Spring 中，容器的实现类有很多种，其中最常用的是 <code>ApplicationContext</code> 和<br><code>ClassPathXmlApplicationContext</code>。<code>ClassPathXmlApplicationContext</code> 可以从类路径下加载 XML 配置文件，创建一个 IOC<br> 容器，并根据配置文件中的信息创建 Bean。下面是一个简单的例子：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ApplicationContext context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;applicationContext.xml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-获取-bean" tabindex="-1">（3）获取 Bean <a class="header-anchor" href="#_3-获取-bean" aria-label="Permalink to &quot;（3）获取 Bean&quot;">​</a></h3><p>在 Spring IOC 容器中，我们可以通过 Bean 的名称或类型来获取 Bean 的实例。</p><p>容器会在初始化时自动创建 Bean，并将其注册到 IOC 容器中，我们可以通过容器来获取相应的 Bean 实例。</p><p>按名称</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UserService userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (UserService) context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按类</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UserService userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.class);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4-bean-的作用域" tabindex="-1">（4）Bean 的作用域 <a class="header-anchor" href="#_4-bean-的作用域" aria-label="Permalink to &quot;（4）Bean 的作用域&quot;">​</a></h3><p>在 Spring 中，Bean 的作用域指的是 Bean 实例的生命周期。<br> Spring 提供了五种常用的 Bean 作用域，分别是 <code>Singleton</code>、<code>Prototype</code>、<code>Request</code>、<code>Session</code> 和 <code>Global Session</code>。</p><p>其中，<code>Singleton</code> 是默认的 Bean 作用域，每个 Bean 在 IOC 容器中只有一个实例；<br><code>Prototype</code> 每次都会创建一个新的 Bean 实例；<code>Request</code> 和 <code>Session</code> 分别在 Web 应用程序的请求和会话范围内有效；<code>Global Session</code> 则在<br><code>Portlet</code> 环境下使用。</p><h3 id="_5-bean-的依赖注入" tabindex="-1">（5）Bean 的依赖注入 <a class="header-anchor" href="#_5-bean-的依赖注入" aria-label="Permalink to &quot;（5）Bean 的依赖注入&quot;">​</a></h3><p>Spring IOC 容器会自动管理对象之间的依赖关系，并将它们注入到对象中。在配置文件中，我们可以通过 <code>property</code> 元素来设置 Bean<br> 的属性值。下面是一个简单的例子：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.UserService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.UserDaoImpl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataSource&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.DataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在上面的配置文件中，我们定义了三个 Bean：<code>userService</code>、<code>userDao</code> 和 <code>dataSource</code>。其中，<code>userService</code> 依赖于 <code>userDao</code>，而 <code>userDao</code> 又依赖于<br><code>dataSource</code>。<br> 通过配置文件，我们将 <code>dataSource</code> 注入到 <code>userDao</code> 中，将 <code>userDao</code> 注入到 <code>userService</code> 中，实现了三个 Bean 之间的依赖关系。</p><h2 id="二、aop" tabindex="-1">二、AOP <a class="header-anchor" href="#二、aop" aria-label="Permalink to &quot;二、AOP&quot;">​</a></h2><h3 id="什么是-aop" tabindex="-1">什么是 AOP <a class="header-anchor" href="#什么是-aop" aria-label="Permalink to &quot;什么是 AOP&quot;">​</a></h3><ul><li><p>AOP（Aspect-Oriented Programming，面向切面编程）是一种面向对象编程的设计模式，用于解决系统中的横切关注点。</p></li><li><p>AOP 的基本思想是将横切关注点（如事务管理、安全检查等）从业务逻辑中分离出来，以增强程序的模块化、可维护性和可重用性。</p></li><li><p>在 AOP 中，切面（Aspect）是一组关注点的集合，通常包括多个切点（Join Point）和增强（Advice）。</p></li><li><p>切点是程序中的特定位置，如方法调用、异常处理等。增强则是对切点执行的操作，如在方法调用前、后或抛出异常时执行某个操作。</p></li></ul><h3 id="aop-的实现方式" tabindex="-1">AOP 的实现方式 <a class="header-anchor" href="#aop-的实现方式" aria-label="Permalink to &quot;AOP 的实现方式&quot;">​</a></h3><ul><li><p>AOP 的实现方式主要有两种：基于代理（Proxy-based）和基于字节码操作（Bytecode manipulation）。</p></li><li><p>在基于代理的实现方式中，AOP 框架会在运行时动态地为目标对象生成一个代理对象，通过代理对象来织入切面逻辑。代理对象实现了目标对象所实现的接口，并将所有的方法调用转发给目标对象。在调用目标对象的方法前后，代理对象会执行相应的增强逻辑。</p></li><li><p>在基于字节码操作的实现方式中，AOP 框架会通过修改字节码来织入切面逻辑。这种方式可以在编译期或加载期对字节码进行修改，从而实现对目标对象的增强。</p></li></ul><h3 id="spring-aop" tabindex="-1">Spring AOP <a class="header-anchor" href="#spring-aop" aria-label="Permalink to &quot;Spring AOP&quot;">​</a></h3><ul><li><p>Spring AOP 是 Spring 框架中的一个模块，提供了对 AOP 的支持。它基于代理的实现方式，使用 JDK 动态代理或 CGLIB 代理来生成代理对象。</p></li><li><p>在 Spring AOP 中，切面通常由增强和切点组成。增强定义了在切点执行前、后或抛出异常时要执行的操作，而切点定义了在哪些位置执行增强操作。</p></li><li><p>Spring AOP 支持四种类型的增强：前置增强、后置增强、环绕增强和异常增强。</p></li><li><p>前置增强是在目标方法执行前执行的操作，后置增强是在目标方法执行后执行的操作，环绕增强是在目标方法执行前后都执行的操作，异常增强是在目标方法抛出异常时执行的操作。</p></li></ul><h3 id="aop-的应用场景" tabindex="-1">AOP 的应用场景 <a class="header-anchor" href="#aop-的应用场景" aria-label="Permalink to &quot;AOP 的应用场景&quot;">​</a></h3><p>AOP 的应用场景包括但不限于以下几个方面：</p><ul><li><p>日志记录：在方法执行前后记录方法的输入参数和返回值等信息。</p></li><li><p>安全控制：检查用户是否有权限执行某个操作。</p></li><li><p>性能监控：在方法执行前后记录方法的执行时间，统计方法的调用次数等。</p></li><li><p>事务管理：在方法执行前后开启和关闭事务，控制事务的提交和回滚。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><p>Spring 框架是目前最流行的企业级 Java 应用开发框架之一，它提供了一系列的特性和功能，使得开发者可以更加方便地开发高质量的企业级应用。</p></li><li><p>本文主要介绍的是 Spring AOP，它是 Spring 框架中的一个模块，提供了对 AOP 的支持。AOP<br> 是一种编程范式，通过将一些与业务逻辑无关的横切关注点分离出来，从而提高了代码的可维护性和可重用性。</p></li><li><p>AOP 的实现方式主要有基于代理和基于字节码操作两种。Spring AOP 使用基于代理的实现方式，通过 JDK 动态代理或 CGLIB<br> 代理生成代理对象，并在代理对象上织入切面逻辑。</p></li><li><p>在 Spring AOP 中，切面由增强和切点组成。增强定义了在切点执行前、后或抛出异常时要执行的操作，而切点定义了在哪些位置执行增强操作。Spring</p></li><li><p>AOP 支持四种类型的增强：前置增强、后置增强、环绕增强和异常增强。</p></li><li><p>AOP 的应用场景包括但不限于日志记录、安全控制、性能监控和事务管理等。在实际的开发中，我们可以使用 AOP 来实现这些功能，从而提高代码的质量和可维护性。</p></li><li><p>综上所述，Spring AOP 是 Spring 框架中非常重要的一个模块，它提供了对 AOP 的支持，使得我们可以更加方便地开发高质量的企业级应用。</p></li><li><p>掌握 Spring AOP 对于 Java 开发者来说非常重要，希望本文能够帮助大家更好地理解和应用 Spring AOP。</p></li></ul>`,43)]))}const g=i(l,[["render",p]]);export{o as __pageData,g as default};
